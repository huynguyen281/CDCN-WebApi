// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpendingManagement.Data.EF;

#nullable disable

namespace SpendingManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            ConcurrencyStamp = "",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("SpendingManagement.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88ba6031-a66b-4a01-8885-941fc869317c",
                            DateOfBirth = new DateTime(2022, 11, 24, 2, 10, 30, 680, DateTimeKind.Local).AddTicks(4462),
                            Email = "leminhloi@gmail.com",
                            EmailConfirmed = true,
                            Gender = 2,
                            LockoutEnabled = false,
                            Name = "Lee Minh Loij",
                            NormalizedEmail = "LEMINHLOI@GMAIL.COM",
                            NormalizedUserName = "LEMINHLOI",
                            PasswordHash = "AQAAAAEAACcQAAAAEJCIZGcaqohLXf3Lbqhi7EHI4mVbP1b9Jvq7PFSMfTVMf+SAbEv3ylcuHBkm3o15Qg==",
                            PhoneNumber = "0948123432",
                            PhoneNumberConfirmed = true,
                            PhotoUrl = "",
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "leminhloi"
                        });
                });

            modelBuilder.Entity("SpendingManagement.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypeOfCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            Description = "Tiền mua đồ ăn này nọ",
                            Name = "Tiền ăn",
                            TypeOfCategory = 1
                        },
                        new
                        {
                            Id = new Guid("89fc5aea-4f76-4a73-9bad-10f0f1f4b6ed"),
                            Description = "Tiền để thuê nhà này nọ",
                            Name = "Tiền nhà",
                            TypeOfCategory = 1
                        },
                        new
                        {
                            Id = new Guid("d4bddcb0-eec9-4a7e-8d18-913ec61218d2"),
                            Description = "Tiền để đi đổ xăng",
                            Name = "Tiền xăng",
                            TypeOfCategory = 1
                        },
                        new
                        {
                            Id = new Guid("0399b203-e976-4b3e-85f4-28a0ef075e5e"),
                            Description = "Tiền mua sắm cho sinh hoạt",
                            Name = "Tiền mua sắm",
                            TypeOfCategory = 1
                        },
                        new
                        {
                            Id = new Guid("f9ee425a-d347-46cc-bc10-d8768efe6724"),
                            Description = "Khác với những cái ở trên",
                            Name = "Khác",
                            TypeOfCategory = 1
                        },
                        new
                        {
                            Id = new Guid("4e4aa116-d90b-461f-965a-54266c39f5b2"),
                            Description = "Tiền lương",
                            Name = "Tiền lương",
                            TypeOfCategory = 0
                        },
                        new
                        {
                            Id = new Guid("9172ccaf-cda8-4759-a649-73d953a7dfce"),
                            Description = "Tiền cho thuê",
                            Name = "Tiền cho thuê",
                            TypeOfCategory = 0
                        },
                        new
                        {
                            Id = new Guid("4b87cab4-b23f-4634-a9b2-8b5b135546af"),
                            Description = "",
                            Name = "Kinh doanh",
                            TypeOfCategory = 0
                        },
                        new
                        {
                            Id = new Guid("1d60846f-cec7-4215-adf2-4b9d2ba8d12e"),
                            Description = "",
                            Name = "Quà tặng",
                            TypeOfCategory = 0
                        },
                        new
                        {
                            Id = new Guid("c1152cbd-d675-43d4-9fa2-904047006122"),
                            Description = "Khác với những cái ở trên",
                            Name = "Khác",
                            TypeOfCategory = 0
                        });
                });

            modelBuilder.Entity("SpendingManagement.Data.Entities.Expenditure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Expenditures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cb55974-6800-464a-9796-27d1e7915c6b"),
                            AppUserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            CategoryId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            Cost = 100000,
                            DateCreate = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("bb6b849f-9683-4793-8f0d-b3d92d9540a9"),
                            AppUserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            CategoryId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            Cost = 20000,
                            DateCreate = new DateTime(2022, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("2788bf73-734e-4717-bd6c-44bf04eea3b8"),
                            AppUserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            CategoryId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            Cost = 10000,
                            DateCreate = new DateTime(2022, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = ""
                        });
                });

            modelBuilder.Entity("SpendingManagement.Data.Entities.Expenditure", b =>
                {
                    b.HasOne("SpendingManagement.Data.Entities.AppUser", "AppUser")
                        .WithMany("Expenditures")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpendingManagement.Data.Entities.Category", "Category")
                        .WithMany("Expenditures")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SpendingManagement.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Expenditures");
                });

            modelBuilder.Entity("SpendingManagement.Data.Entities.Category", b =>
                {
                    b.Navigation("Expenditures");
                });
#pragma warning restore 612, 618
        }
    }
}
